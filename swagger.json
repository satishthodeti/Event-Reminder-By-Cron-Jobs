{
    "openapi": "3.0.0",
    "info": {
        "title": "Event Reminder System API",
        "version": "1.0.0",
        "description": "API documentation for Event Reminder System using Node.js, Express, MongoDB and Cron Jobs"
    },
    "servers": [
        {
            "url": "http://localhost:5000/api",
            "description": "Local server"
        }
    ],
    "paths": {
        "/users/register": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Register a new user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/ Ros#/components/schemas/UserRegister"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Login user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLogin"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "description": "JWT token for authentication"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logout successful"
                    }
                }
            }
        },
        "/users/get/all": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of all users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/get/{id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/update": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user info",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/delete/{id}": {
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete user by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/events/add": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Create a new event",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventInput"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Event created successfully"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/events/edit": {
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Update an existing event",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventEditInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Event updated successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/events/delete": {
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Delete an event",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "example": "64ff98e930c8c0ab197a2874"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Event deleted successfully"
                    },
                    "404": {
                        "description": "Event not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/events/get/all": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get all events or filter by date, range, or keyword",
                "parameters": [
                    {
                        "name": "date",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "Filter events on a specific date"
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "Start date for filtering events"
                    },
                    {
                        "name": "toDate",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        },
                        "description": "End date for filtering events"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Keyword to search in title or description"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching or all events"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/events/get/by/{id}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Get event by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "64ff98e930c8c0ab197a2874"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event found"
                    },
                    "404": {
                        "description": "Event not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "UserRegister": {
                "type": "object",
                "required": [
                    "username",
                    "email",
                    "password"
                ],
                "properties": {
                    "username": {
                        "type": "string",
                        "example": "john_doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "john@example.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "password123"
                    }
                }
            },
            "UserLogin": {
                "type": "object",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "example": "john@example.com"
                    },
                    "password": {
                        "type": "string",
                        "example": "password123"
                    }
                }
            },
            "UserUpdate": {
                "type": "object",
                "required": [
                    "id",
                    "username",
                    "email"
                ],
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "username": {
                        "type": "string",
                        "example": "updated_name"
                    },
                    "email": {
                        "type": "string",
                        "example": "updated@example.com"
                    }
                }
            },
            "EventInput": {
                "type": "object",
                "required": [
                    "title",
                    "description",
                    "eventTime",
                    "email"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Doctor Appointment"
                    },
                    "description": {
                        "type": "string",
                        "example": "Routine checkup"
                    },
                    "eventTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-07-03T12:05:00.000Z"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    }
                }
            },
            "EventEditInput": {
                "type": "object",
                "required": [
                    "id"
                ],
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "64ff98e930c8c0ab197a2874"
                    },
                    "title": {
                        "type": "string",
                        "example": "Updated Event Title"
                    },
                    "description": {
                        "type": "string",
                        "example": "Updated event description"
                    },
                    "eventTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-07-03T14:00:00.000Z"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "updated@example.com"
                    }
                }
            }
        }
    }
}